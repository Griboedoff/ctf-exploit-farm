import aiohttp
import async_timeout

from backends.flag_submitter import AbstractFlagSubmitter
from farm import models as models


class HackerdomFlagSubmitter(AbstractFlagSubmitter):
    """
    Flag submitter for Hackerdom (RuCTF and RuCTFE) checksystem.
    See https://github.com/HackerDom/checksystem/blob/master/lib/CS/Controller/Flags.pm or whole repository for details.
    """

    TIMEOUT = 10  # For sending one bunch of flags. In seconds

    def __init__(self, host, team_token):
        super().__init__()
        self._host = host
        self.team_token = team_token
        self.url = self._build_url(host)

        self._headers = {'X-Team-Token': self.team_token}

    async def send_flags(self, flags: [models.Flag]):
        try:
            response = await self._try_send_flags(flags)
        except Exception as e:
            # TODO (andgein): try more times
            return

        flags_results = {flag_info.flag: flag_info for flag_info in response}
        for flag in flags:
            if flag.flag not in flags_results:
                self._logger.error('Checksystem returned answer, but I can\'t find my flag %s in it. Response is %s' % (
                    flag.flag,
                    flags_results
                ))
            else:
                is_valid = flags_results[flag.flag].status
                message = flags_results[flag.flag].msg
                if is_valid:
                    flag.mark_as_valid(message)
                else:
                    flag.mark_as_invalid(message)

    async def _try_send_flags(self, flags: [models.Flag]):
        flags_data = [flag.flag for flag in flags]

        async with aiohttp.ClientSession() as session:
            with async_timeout.timeout(self.TIMEOUT):
                async with session.put(self.url, headers=self._headers, data=flags_data) as request:
                    return await request.json()

    @staticmethod
    def _build_url(host):
        return 'http://%s/flags' % host
