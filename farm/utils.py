import csv
import importlib
import importlib.util
import re

__all__ = [
    'camel_case_to_underscore',
    'import_type', 'import_module_from_file',
    'read_teams_from_file',
]


first_cap_re = re.compile('(.)([A-Z][a-z]+)')
all_cap_re = re.compile('([a-z0-9])([A-Z])')


def camel_case_to_underscore(name: str):
    s1 = first_cap_re.sub(r'\1_\2', name)
    return all_cap_re.sub(r'\1_\2', s1).lower()


def import_type(name: str):
    if name.count('.') < 1:
        raise ValueError('Type name should contains dot: "%s", because otherwise I can not split it into module name and type name' % name)

    module_name, type_name = name.rsplit('.', 1)
    module = importlib.import_module(module_name)

    if not hasattr(module, type_name):
        raise ValueError('Can not find type %s in module %s' % (type_name, module))

    return getattr(module, type_name)


def import_module_from_file(path: str):
    spec = importlib.util.spec_from_file_location("module", path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module


def read_teams_from_file(file_name: str):
    """
    Reads teams from CSV file. File should be in UTF-8 and has two columns: team name and vulnbox address.
    Common usage is `TEAMS = read_teams_from_file('teams.csv')` in `settings.py`
    :param file_name: name of CSV file
    :return: list of pairs
    """
    from farm.logging import Logger

    logger = Logger('Configurator')
    logger.info('Reading teams list from %s' % file_name)
    result = []
    with open(file_name, 'r', newline='', encoding='utf-8') as f:
        csv_reader = csv.reader(f)
        for line_index, row in enumerate(csv_reader):
            if len(row) != 2:
                raise ValueError('Invalid teams files %s: row #%d "%s" contains more or less than 2 items' % (
                    file_name,
                    line_index,
                    ','.join(row)
                ))

            result.append(tuple(row))
    logger.info('Read %d teams from %s' % (len(result), file_name))
    return result
