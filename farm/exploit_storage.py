import glob
import os.path

from farm import utils
from farm.exploits import AbstractExploit
from farm.logging import Logger


class AbstractExploitStorage:
    def __init__(self):
        self.logger = Logger('ExploitStorage')

    async def get_exploits(self):
        raise NotImplementedError()


class DirectoryExploitStorage(AbstractExploitStorage):
    def __init__(self, directory):
        super().__init__()
        self.directory = directory

    async def get_exploits(self):
        self.logger.info('Loading exploits from %s' % os.path.abspath(self.directory))
        AbstractExploit.clear_subclasses()
        for file_name in glob.glob(self.directory + '/**/*.py', recursive=True):
            self.logger.info('Try to load exploits from %s' % file_name)
            try:
                utils.import_module_from_file(file_name)
            except Exception as e:
                raise Exception('Can not load exploit from %s: %s' % (file_name, e), e)

        exploits_classes = AbstractExploit.get_all_subclasses()
        self.logger.info(
            'Found %d exploit classes: [%s]' % (
                len(exploits_classes),
                ', '.join(c.__name__ for c in exploits_classes)
            )
        )
        return [exploit_class() for exploit_class in exploits_classes]


class OneExploitStorage(AbstractExploitStorage):
    def __init__(self, exploit):
        super().__init__()
        self.exploit = exploit

    async def get_exploits(self):
        return [self.exploit]